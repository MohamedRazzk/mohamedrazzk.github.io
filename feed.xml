

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Razzk</title>
  <subtitle>Computer and Network Security Blog</subtitle>
  <updated>2023-03-31T13:16:01+02:00</updated>
  <author>
    <name>Mohamed F. Razzk</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 Mohamed F. Razzk </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Python in Cybersecurity - Port Scanner</title>
    <link href="http://localhost:4000/posts/Python-In-Cybersecurity-Port-Scanner/" rel="alternate" type="text/html" title="Python in Cybersecurity - Port Scanner" />
    <published>2023-03-31T05:33:00+02:00</published>
  
    <updated>2023-03-31T05:33:00+02:00</updated>
  
    <id>http://localhost:4000/posts/Python-In-Cybersecurity-Port-Scanner/</id>
    <content src="http://localhost:4000/posts/Python-In-Cybersecurity-Port-Scanner/" />
    <author>
      <name>Razzk</name>
    </author>

  
    
    <category term="Python in Cybersecurity" />
    
  

  
    <summary>
      





      Description

How to write adavanced port scanner in python

Video



Code
import socket
import re
from termcolor import colored
import optparse
from threading import *



def portscanner(host, port):
    try:
        socket.setdefaulttimeout(5)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        if sock.connect_ex((host,port)):
            print(colored("port %d closed" % ...
    </summary>
  

  </entry>

  
  <entry>
    <title>InsomniHackTeaser Crypto 18 - Rule86</title>
    <link href="http://localhost:4000/posts/InsomniHack-Teaser-18/" rel="alternate" type="text/html" title="InsomniHackTeaser Crypto 18 - Rule86" />
    <published>2020-07-13T08:10:00+02:00</published>
  
    <updated>2020-07-13T08:10:00+02:00</updated>
  
    <id>http://localhost:4000/posts/InsomniHack-Teaser-18/</id>
    <content src="http://localhost:4000/posts/InsomniHack-Teaser-18/" />
    <author>
      <name>Razzk</name>
    </author>

  
    
    <category term="Cryptography Engineering" />
    
  

  
    <summary>
      





      Inroduction


  InsomniHack Teaser CTF 2018 - Rule86


Description

Kevin is working on a new synchronous stream cipher, but he has been re-using his key.

In this challenge, you are provided with 4 files:

hint.gif.enc          - An encrypted GIF
super_cipher.py.enc   - An encrypted python script
rule86.txt            - A cleartext file 
rule86.txt.enc        - The encrypted version of said fi...
    </summary>
  

  </entry>

  
  <entry>
    <title>RITSEC Crypto 18 - CictroHash</title>
    <link href="http://localhost:4000/posts/RITSEC-18-CictroHash/" rel="alternate" type="text/html" title="RITSEC Crypto 18 - CictroHash" />
    <published>2019-03-18T08:10:00+02:00</published>
  
    <updated>2019-03-18T08:10:00+02:00</updated>
  
    <id>http://localhost:4000/posts/RITSEC-18-CictroHash/</id>
    <content src="http://localhost:4000/posts/RITSEC-18-CictroHash/" />
    <author>
      <name>Razzk</name>
    </author>

  
    
    <category term="Cryptography Engineering" />
    
    <category term="RITSEC-CTF" />
    
  

  
    <summary>
      





      Inroduction


  RITSEC CTF 2018 - CictroHash


Description

For this challenge you must implement the described Hash Function and then find a collision of two strings.
Once a collision is found send both strings to fun.ritsec.club:8003 as a HTTP POST request like below:

curl -X POST http://fun.ritsec.club:8003/checkCollision 
–header “Content-Type: application/json” 
–data ‘{“str1”: “”, “str2”...
    </summary>
  

  </entry>

  
  <entry>
    <title>TAMU Crypto 18 - LarryCrypt</title>
    <link href="http://localhost:4000/posts/TAMU-18-LarryCrypt/" rel="alternate" type="text/html" title="TAMU Crypto 18 - LarryCrypt" />
    <published>2019-01-12T08:10:00+02:00</published>
  
    <updated>2019-01-12T08:10:00+02:00</updated>
  
    <id>http://localhost:4000/posts/TAMU-18-LarryCrypt/</id>
    <content src="http://localhost:4000/posts/TAMU-18-LarryCrypt/" />
    <author>
      <name>Razzk</name>
    </author>

  
    
    <category term="Cryptography Engineering" />
    
    <category term="TAMU-CTF" />
    
  

  
    <summary>
      





      Inroduction


  TAMU CTF 2018 - LarryCrypt


Description

A binary executable called larrycrypt was provided.

./larrycrypt -R 4 -K “V3c70R” flag

Writeup

We tried some input for the larrycrypt binary and we noticed that it was always using Mu as key, no matter what was the -K parameter.
It was likely some bug, but then the SimpleDES challenge  we just solved came to our minds.

The binary was...
    </summary>
  

  </entry>

  
  <entry>
    <title>TAMU Crypto 18 - SimpleDES</title>
    <link href="http://localhost:4000/posts/TAMU-18-SimpleDES/" rel="alternate" type="text/html" title="TAMU Crypto 18 - SimpleDES" />
    <published>2018-12-06T08:10:00+02:00</published>
  
    <updated>2018-12-06T08:10:00+02:00</updated>
  
    <id>http://localhost:4000/posts/TAMU-18-SimpleDES/</id>
    <content src="http://localhost:4000/posts/TAMU-18-SimpleDES/" />
    <author>
      <name>Razzk</name>
    </author>

  
    
    <category term="Cryptography Engineering" />
    
    <category term="TAMU-CTF" />
    
  

  
    <summary>
      





      Inroduction


  TAMU CTF 2018 - SimpleDES


Description

Larry is working on an encryption algorithm based on DES. He hasn’t worked out all the kinks yet, but he thinks it works. Your job is to confirm that you can decrypt a message, given the algorithm and parameters used.

The organizer gave us a specification about this simpleDES cipher:

 His system works as follows:
    - Choose a plaintex...
    </summary>
  

  </entry>

</feed>


