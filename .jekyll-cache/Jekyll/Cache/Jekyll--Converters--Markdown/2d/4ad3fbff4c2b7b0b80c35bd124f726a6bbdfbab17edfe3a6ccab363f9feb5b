I"ð(<h2 id="inroduction">Inroduction</h2>

<blockquote>
  <p>Qiwi-Infosec - Crypto 400_1 based on Coppersmithâ€™s attack.</p>
</blockquote>

<h2 id="description">Description</h2>

<p>Message m has been encrypted by RSA with exponent e=3 for three users. Users have been used different modulus (n1, n2, n3 respectively). As a result 3 ciphertexts have been obtained (c1, c2, c3 respectively). Decrypt the message. The flag is a sensible text.</p>

<p>The given n1, n2, n3, c1, c2, c3 are reported in the script</p>

<h2 id="solution">Solution</h2>

<p>This crypto challenge is based on the <a href="https://en.wikipedia.org/wiki/Coppersmith's_attack#H.C3.A5stad.27s_broadcast_attack">Hastadâ€™s broadcast attack</a>.</p>

<p>So by implementing the Chinese Remainder Theorem we could solve this easily</p>

<p>The python script FTW</p>

<p>This is a simple crypto challenge on the <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Diffie-Hellman key exchange protocol</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td> --><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
</span>
<span class="n">e</span><span class="o">=</span><span class="mi">3</span>
<span class="n">n1</span><span class="o">=</span><span class="mi">95118357989037539883272168746004652872958890562445814301889866663072352421703264985997800660075311645555799745426868343365321502734736006248007902409628540578635925559742217480797487130202747020211452620743021097565113059392504472785227154824117231077844444672393221838192941390309312484066647007469668558141</span>
<span class="n">n2</span><span class="o">=</span><span class="mi">98364165919251246243846667323542318022804234833677924161175733253689581393607346667895298253718184273532268982060905629399628154981918712070241451494491161470827737146176316011843738943427121602324208773653180782732999422869439588198318422451697920640563880777385577064913983202033744281727004289781821019463</span>
<span class="n">n3</span><span class="o">=</span><span class="mi">68827940939353189613090392226898155021742772897822438483545021944215812146809318686510375724064888705296373853398955093076663323001380047857809774866390083434272781362447147441422207967577323769812896038816586757242130224524828935043187315579523412439309138816335569845470021720847405857361000537204746060031</span>
<span class="n">c1</span><span class="o">=</span><span class="mi">64830446708169012766414587327568812421130434817526089146190136796461298592071238930384707543318390292451118980302805512151790248989622269362958718228298427212630272525186478627299999847489018400624400671876697708952447638990802345587381905407236935494271436960764899006430941507608152322588169896193268212007</span>
<span class="n">c2</span><span class="o">=</span><span class="mi">96907490717344346588432491603722312694208660334282964234487687654593984714144825656198180777872327279250667961465169799267405734431675111035362089729249995027326863099262522421206459400405230377631141132882997336829218810171728925087535674907455584557956801831447125486753515868079342148815961792481779375529</span>
<span class="n">c3</span><span class="o">=</span><span class="mi">43683874913011746530056103145445250281307732634045437486524605104639785469050499171640521477036470750903341523336599602288176611160637522568868391237689241446392699321910723235061180826945464649780373301028139049288881578234840739545000338202917678008269794179100732341269448362920924719338148857398181962112</span>


<span class="k">def</span> <span class="nf">chinese_remainder</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">a</span><span class="p">):</span>
    <span class="nb">sum</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">prod</span> <span class="o">=</span> <span class="nf">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">n_i</span><span class="p">,</span> <span class="n">a_i</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">a</span><span class="p">):</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">prod</span> <span class="o">/</span> <span class="n">n_i</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="n">a_i</span> <span class="o">*</span> <span class="nf">mul_inv</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">n_i</span><span class="p">)</span> <span class="o">*</span> <span class="n">p</span>
    <span class="k">return</span> <span class="nb">sum</span> <span class="o">%</span> <span class="n">prod</span>

<span class="k">def</span> <span class="nf">mul_inv</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">b0</span> <span class="o">=</span> <span class="n">b</span>
    <span class="n">x0</span><span class="p">,</span> <span class="n">x1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">q</span> <span class="o">=</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span>
        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="o">%</span><span class="n">b</span>
        <span class="n">x0</span><span class="p">,</span> <span class="n">x1</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">-</span> <span class="n">q</span> <span class="o">*</span> <span class="n">x0</span><span class="p">,</span> <span class="n">x0</span>
    <span class="k">if</span> <span class="n">x1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span> <span class="n">x1</span> <span class="o">+=</span> <span class="n">b0</span>
    <span class="k">return</span> <span class="n">x1</span>

<span class="k">def</span> <span class="nf">find_invpow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
    <span class="s">"""Finds the integer component of the n'th root of x,
    an integer such that y ** n &lt;= x &lt; (y + 1) ** n.
    """</span>
    <span class="n">high</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">high</span> <span class="o">**</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">:</span>
        <span class="n">high</span> <span class="o">*=</span> <span class="mi">2</span>
    <span class="n">low</span> <span class="o">=</span> <span class="n">high</span><span class="o">/</span><span class="mi">2</span>
    <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="k">if</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">mid</span> <span class="ow">and</span> <span class="n">mid</span><span class="o">**</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">:</span>
            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span>
        <span class="k">elif</span> <span class="n">high</span> <span class="o">&gt;</span> <span class="n">mid</span> <span class="ow">and</span> <span class="n">mid</span><span class="o">**</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">:</span>
            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">mid</span>
    <span class="k">return</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>

<span class="n">flag_cubed</span><span class="o">=</span><span class="nf">chinese_remainder</span><span class="p">([</span><span class="n">n1</span><span class="p">,</span><span class="n">n2</span><span class="p">,</span><span class="n">n3</span><span class="p">],[</span><span class="n">c1</span><span class="p">,</span><span class="n">c2</span><span class="p">,</span><span class="n">c3</span><span class="p">])</span>
<span class="n">flag</span><span class="o">=</span><span class="nf">find_invpow</span><span class="p">(</span><span class="n">flag_cubed</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"flag: "</span><span class="p">,</span><span class="nf">hex</span><span class="p">(</span><span class="n">flag</span><span class="p">)[</span><span class="mi">2</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">decode</span><span class="p">(</span><span class="s">"hex"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>` Flag is Captured `Â Â» <code class="language-plaintext highlighter-rouge">theoretical_computer_scientist_johan_torkel_hastad</code></p>

:ET