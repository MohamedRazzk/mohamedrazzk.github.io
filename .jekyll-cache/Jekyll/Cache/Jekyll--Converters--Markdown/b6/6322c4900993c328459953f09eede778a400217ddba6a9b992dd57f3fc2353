I"°<h2 id="inroduction">Inroduction</h2>

<blockquote>
  <p>Cyber Talents - training reverse engineering ahram canadian competition.</p>
</blockquote>

<h2 id="description">Description</h2>

<p>x64 stripped linux binary file given file called training with description of ‚Äú training, keep training.‚Äù Reverse it to get the flag</p>

<h2 id="file">File</h2>

<p>For downloading  , Visit  <a href="https://github.com/MohamedRazzk/mohamedrazzk.github.io/blob/master/_posts/Data/training">training </a>.</p>

<h2 id="solution">Solution</h2>

<p>The file is a x64 stripped linux binary
At running, it reads from stdin and just prints back what I write
So let‚Äôs load it to IDA
I also used HexRays decompiler to get the pseudo-code of the functions
For the main function we have</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre><span class="n">__int64</span> <span class="kr">__fastcall</span> <span class="nf">main</span><span class="p">(</span><span class="n">__int64</span> <span class="n">a1</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">a2</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">a3</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">_QWORD</span> <span class="o">*</span><span class="n">v3</span><span class="p">;</span> <span class="c1">// rax</span>
  <span class="kt">char</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// bl</span>
  <span class="n">__int64</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// rax</span>
  <span class="kt">char</span> <span class="n">v7</span><span class="p">;</span> <span class="c1">// [rsp+Fh] [rbp-A1h]</span>
  <span class="kt">char</span> <span class="n">v8</span><span class="p">;</span> <span class="c1">// [rsp+10h] [rbp-A0h]</span>
  <span class="kt">char</span> <span class="n">v9</span><span class="p">;</span> <span class="c1">// [rsp+30h] [rbp-80h]</span>
  <span class="kt">char</span> <span class="n">v10</span><span class="p">;</span> <span class="c1">// [rsp+50h] [rbp-60h]</span>
  <span class="kt">char</span> <span class="n">v11</span><span class="p">;</span> <span class="c1">// [rsp+70h] [rbp-40h]</span>
  <span class="kt">unsigned</span> <span class="n">__int64</span> <span class="n">v12</span><span class="p">;</span> <span class="c1">// [rsp+98h] [rbp-18h]</span>

  <span class="n">v12</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">basic_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v8</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">);</span>
  <span class="n">sub_130A</span><span class="p">();</span>
  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">v3</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="k">operator</span><span class="o">&gt;&gt;&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v8</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">basic_ios</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="k">operator</span> <span class="kt">bool</span><span class="p">(</span><span class="n">v3</span> <span class="o">+</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">v3</span> <span class="o">-</span> <span class="mi">24LL</span><span class="p">))</span> <span class="p">)</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">basic_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v9</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v8</span><span class="p">);</span>
    <span class="n">sub_13DB</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v10</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v9</span><span class="p">);</span>
    <span class="n">v4</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">sub_1A6C</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v10</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">unk_2046A0</span><span class="p">)</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;::</span><span class="n">allocator</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v7</span><span class="p">);</span>
      <span class="n">v4</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">basic_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v11</span><span class="p">,</span> <span class="s">"correct"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v7</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">basic_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v11</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v8</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">v5</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="k">operator</span><span class="o">&lt;&lt;&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v11</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">::</span><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">v5</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::~</span><span class="n">basic_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v11</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">v4</span> <span class="p">)</span>
      <span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;::~</span><span class="n">allocator</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v7</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::~</span><span class="n">basic_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v10</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::~</span><span class="n">basic_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v9</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::~</span><span class="n">basic_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v8</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0LL</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Here we have a C++ program, so we have other functions to allocate memory and copy data
For now we can understand</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">basic_string</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>to be a data copy mechanism that copies the data from the second parameter to the first one
And</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::~</span><span class="n">basic_string</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>to be a memory free mechanism
First let me explain the code line by line</p>

<ol>
  <li>First it defines the different used variables and their types</li>
  <li>Assigns <code class="language-plaintext highlighter-rouge">v12</code> to be a 8-byte (qword) address at offset 0x28 from the register segment FS (not important for us)</li>
  <li><code class="language-plaintext highlighter-rouge">a2</code> and <code class="language-plaintext highlighter-rouge">a3</code> are the parameters of the main function so this should be a default operation (not important for us)</li>
  <li>Executes the function <code class="language-plaintext highlighter-rouge">sub_130A</code></li>
  <li>Initiates an infinity loop (can be broken from inside)</li>
  <li>Copies the address of pointer <code class="language-plaintext highlighter-rouge">v8</code> to the address of the stdin (now any input data will be at pointer <code class="language-plaintext highlighter-rouge">v8</code>)</li>
  <li>Checks if the previous operation returned properly if not it will break (not important for us)</li>
  <li>Copies the address of <code class="language-plaintext highlighter-rouge">v8</code> to the address of <code class="language-plaintext highlighter-rouge">v9</code> (now any input data will be at pointer <code class="language-plaintext highlighter-rouge">v9</code>)</li>
  <li>Executes sub_13DB with two pointers <code class="language-plaintext highlighter-rouge">v10</code> and <code class="language-plaintext highlighter-rouge">v9</code> (our input data)</li>
  <li>Assigns <code class="language-plaintext highlighter-rouge">v4</code> to be 0</li>
  <li>Executes <code class="language-plaintext highlighter-rouge">sub_1A6C</code> with two pointer <code class="language-plaintext highlighter-rouge">&amp;v10</code> and unknown pointer at 0x2046A0 and check for the return</li>
  <li>If returned a non-zero value it allocates some memory and gives its address to pointer <code class="language-plaintext highlighter-rouge">v7</code> and assigns <code class="language-plaintext highlighter-rouge">v4</code> to 1</li>
  <li>Copies the string <code class="language-plaintext highlighter-rouge">correct</code> to memory of <code class="language-plaintext highlighter-rouge">v11</code></li>
  <li>If returned zero, it copies data from <code class="language-plaintext highlighter-rouge">v8</code> (our input data) to pointer <code class="language-plaintext highlighter-rouge">v11</code></li>
  <li>Copies address of <code class="language-plaintext highlighter-rouge">v11</code> (<code class="language-plaintext highlighter-rouge">correct</code> or our input data) to be the address of stdout (prints <code class="language-plaintext highlighter-rouge">&amp;v11</code>)</li>
  <li>Prints new line</li>
  <li>Free memory of <code class="language-plaintext highlighter-rouge">v11</code></li>
  <li>Free memory of <code class="language-plaintext highlighter-rouge">v7</code> if <code class="language-plaintext highlighter-rouge">v4</code> is non-zero (or when the previous condition is true)</li>
  <li>Free memory of <code class="language-plaintext highlighter-rouge">v9</code>, <code class="language-plaintext highlighter-rouge">v10</code>, <code class="language-plaintext highlighter-rouge">v8</code>, and return</li>
</ol>

<p>So simply it will read our input, make some check on it, if it passed it will print ‚Äòcorrect‚Äô if not it will print our input
For the checking function <code class="language-plaintext highlighter-rouge">sub_1A6C</code> we have</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="n">_BOOL8</span> <span class="kr">__fastcall</span> <span class="nf">sub_1A6C</span><span class="p">(</span><span class="n">__int64</span> <span class="n">a1</span><span class="p">,</span> <span class="n">__int64</span> <span class="n">a2</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// rbx</span>
  <span class="n">__int64</span> <span class="n">v3</span><span class="p">;</span> <span class="c1">// r12</span>
  <span class="n">__int64</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// rbx</span>
  <span class="n">__int64</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// rax</span>
  <span class="n">_BOOL8</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// rax</span>

  <span class="n">v2</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">size</span><span class="p">(</span><span class="n">a1</span><span class="p">);</span>
  <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">v2</span> <span class="o">==</span> <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">size</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">v3</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">size</span><span class="p">(</span><span class="n">a1</span><span class="p">);</span>
    <span class="n">v4</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">data</span><span class="p">(</span><span class="n">a2</span><span class="p">);</span>
    <span class="n">v5</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">data</span><span class="p">(</span><span class="n">a1</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">sub_18BF</span><span class="p">(</span><span class="n">v5</span><span class="p">,</span> <span class="n">v4</span><span class="p">,</span> <span class="n">v3</span><span class="p">)</span> <span class="p">)</span>
      <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>And for <code class="language-plaintext highlighter-rouge">sub_18BF</code></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="kr">__fastcall</span> <span class="nf">sub_18BF</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">a1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">a2</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">a3</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax</span>

  <span class="k">if</span> <span class="p">(</span> <span class="n">a3</span> <span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">memcmp</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">);</span>
  <span class="k">else</span>
    <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Which seems to be a simple comparison function that makes sure the data and the size of the two pointers are the same
So now we need to know the data at the pointer <code class="language-plaintext highlighter-rouge">unk_2046A0</code>, but when I tried to dump it it was not initialised
Pointer <code class="language-plaintext highlighter-rouge">unk_2046A0</code> will be initialised at the runtime by some function
To know where it will be filled with data in ida you can jump to its x-refernces (right click‚Äì&gt;jump to xref)
To find that it will be initialised by the function <code class="language-plaintext highlighter-rouge">sub_178E</code> at which we have</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kt">unsigned</span> <span class="n">__int64</span> <span class="kr">__fastcall</span> <span class="nf">sub_178E</span><span class="p">(</span><span class="kt">int</span> <span class="n">a1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a2</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">v3</span><span class="p">;</span> <span class="c1">// [rsp+17h] [rbp-19h]</span>
  <span class="kt">unsigned</span> <span class="n">__int64</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-18h]</span>

  <span class="n">v4</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">a1</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">a2</span> <span class="o">==</span> <span class="mh">0xFFFF</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ios_base</span><span class="o">::</span><span class="n">Init</span><span class="o">::</span><span class="n">Init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unk_204680</span><span class="p">);</span>
    <span class="n">__cxa_atexit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">std</span><span class="o">::</span><span class="n">ios_base</span><span class="o">::</span><span class="n">Init</span><span class="o">::~</span><span class="n">Init</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">unk_204680</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">off_204008</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;::</span><span class="n">allocator</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v3</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">basic_string</span><span class="p">(</span>
      <span class="o">&amp;</span><span class="n">unk_2046A0</span><span class="p">,</span>
      <span class="s">"IQHR}nxio_vtvk_aapbijsr_vnxwbbmm{"</span><span class="p">,</span>
      <span class="o">&amp;</span><span class="n">v3</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;::~</span><span class="n">allocator</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v3</span><span class="p">);</span>
    <span class="n">__cxa_atexit</span><span class="p">(</span>
      <span class="o">&amp;</span><span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::~</span><span class="n">basic_string</span><span class="p">,</span>
      <span class="o">&amp;</span><span class="n">unk_2046A0</span><span class="p">,</span>
      <span class="o">&amp;</span><span class="n">off_204008</span><span class="p">);</span>
    <span class="n">sub_19B4</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unk_204260</span><span class="p">);</span>
    <span class="n">__cxa_atexit</span><span class="p">(</span><span class="n">sub_261E</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">unk_204260</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">off_204008</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">)</span> <span class="o">^</span> <span class="n">v4</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>From the code we know that it will copy the string <code class="language-plaintext highlighter-rouge">IQHR}nxio_vtvk_aapbijsr_vnxwbbmm{</code> to our unknown pointer
Now I am pretty sure that the function <code class="language-plaintext highlighter-rouge">sub_13DB</code> is the encryption function that takes two pointers <code class="language-plaintext highlighter-rouge">&amp;v10</code> and <code class="language-plaintext highlighter-rouge">&amp;v9</code> (our input) and it will encrypt our input and copy the result to <code class="language-plaintext highlighter-rouge">&amp;v10</code> to be checked again by <code class="language-plaintext highlighter-rouge">sub_1A6C</code>
Now for <code class="language-plaintext highlighter-rouge">sub_13DB</code> we have</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="rouge-code"><pre><span class="n">__int64</span> <span class="kr">__fastcall</span> <span class="nf">sub_13DB</span><span class="p">(</span><span class="n">__int64</span> <span class="n">a1</span><span class="p">,</span> <span class="n">__int64</span> <span class="n">a2</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// ebx</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">v3</span><span class="p">;</span> <span class="c1">// rax</span>
  <span class="kt">signed</span> <span class="kt">int</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// eax</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">v5</span><span class="p">;</span> <span class="c1">// rax</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">v6</span><span class="p">;</span> <span class="c1">// rax</span>
  <span class="n">__int64</span> <span class="n">v7</span><span class="p">;</span> <span class="c1">// rbx</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// [rsp+14h] [rbp-1Ch]</span>
  <span class="kt">int</span> <span class="n">v10</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-18h]</span>

  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">a2</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">v2</span> <span class="o">=</span> <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">a2</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
    <span class="n">v10</span> <span class="o">=</span> <span class="n">v2</span> <span class="o">+</span> <span class="o">*</span><span class="n">sub_1A4C</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unk_204260</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
    <span class="n">v3</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">a2</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">sub_1929</span><span class="p">(</span><span class="o">*</span><span class="n">v3</span><span class="p">)</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="n">v4</span> <span class="o">=</span> <span class="mi">122</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">v5</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">a2</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span> <span class="n">sub_194C</span><span class="p">(</span><span class="o">*</span><span class="n">v5</span><span class="p">)</span> <span class="p">)</span>
        <span class="n">v4</span> <span class="o">=</span> <span class="mi">90</span><span class="p">;</span>
      <span class="k">else</span>
        <span class="n">v4</span> <span class="o">=</span> <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">a2</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span> <span class="n">v10</span> <span class="o">&gt;</span> <span class="n">v4</span> <span class="p">)</span>
      <span class="n">v10</span> <span class="o">-=</span> <span class="mi">26</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">a2</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">123</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="n">LOBYTE</span><span class="p">(</span><span class="n">v7</span><span class="p">)</span> <span class="o">=</span> <span class="mi">125</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span> <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">a2</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">125</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="n">LOBYTE</span><span class="p">(</span><span class="n">v7</span><span class="p">)</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">v6</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">a2</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span> <span class="n">sub_18FA</span><span class="p">(</span><span class="o">*</span><span class="n">v6</span><span class="p">)</span> <span class="p">)</span>
        <span class="n">LOBYTE</span><span class="p">(</span><span class="n">v7</span><span class="p">)</span> <span class="o">=</span> <span class="n">v10</span><span class="p">;</span>
      <span class="k">else</span>
        <span class="n">v7</span> <span class="o">=</span> <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">a2</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">a2</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="n">v7</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">basic_string</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">a1</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>You can understand :</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">std</span><span class="o">::</span><span class="n">__cxx11</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">a2</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>to be just <code class="language-plaintext highlighter-rouge">(&amp;a2+i)</code> which is <code class="language-plaintext highlighter-rouge">a2[i]</code></p>

<p>For <code class="language-plaintext highlighter-rouge">sub_1A4C</code>, <code class="language-plaintext highlighter-rouge">sub_1929</code>, <code class="language-plaintext highlighter-rouge">sub_194C</code>, <code class="language-plaintext highlighter-rouge">sub_18FA</code>, they are just small checking functions</p>

<p>Also we have this pointer <code class="language-plaintext highlighter-rouge">unk_204260</code> which is also not initialised, jump to its x-references to find out the function that will fill it
This function is <code class="language-plaintext highlighter-rouge">sub_130A</code> which is hard to be reversed so we will debug (source code debugging) it to get the data at this pointer
I set a break point at the line after the line it used in
I used ida x64 remote linux debugger server on ubuntu x64
Dumped the data from it with <code class="language-plaintext highlighter-rouge">GetManyBytes</code> idapython api function
The dumped data was</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">[</span><span class="err">'\</span><span class="n">x03</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x05</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x07</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x0b</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x11</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x13</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x17</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x1d</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x1f</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="o">%</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="p">)</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="o">+</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="o">/</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x005</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="p">;</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="o">=</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00C</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00G</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00I</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00O</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00S</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00Y</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00a</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00e</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00g</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00k</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00m</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00q</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x7f</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x83</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x89</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x8b</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x95</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x97</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x9d</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xa3</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xa7</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xad</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xb3</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xb5</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xbf</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xc1</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xc5</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xc7</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xd3</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xdf</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xe3</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xe5</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xe9</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xef</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xf1</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">xfb</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">'</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>the fact that these bytes will be casted to be int32 and every int32 is 4 bytes, also we know that the bytes are in little-endian format so a bytes array like <code class="language-plaintext highlighter-rouge">'\x03\x00\x00\x00' </code>is just 0x03 and so on
So for now we have our key array to be</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">[</span><span class="mh">0x03</span><span class="p">,</span><span class="mh">0x05</span><span class="p">,</span><span class="mh">0x07</span><span class="p">,</span><span class="mh">0x0b</span><span class="p">,</span><span class="mh">0x0d</span><span class="p">,</span><span class="mh">0x11</span><span class="p">,</span><span class="mh">0x13</span><span class="p">,</span><span class="mh">0x17</span><span class="p">,</span><span class="mh">0x1D</span><span class="p">,</span><span class="mh">0x1F</span><span class="p">,</span><span class="mh">0x25</span><span class="p">,</span><span class="mh">0x29</span><span class="p">,</span><span class="mh">0x2B</span><span class="p">,</span><span class="mh">0x2F</span><span class="p">,</span><span class="mh">0x35</span><span class="p">,</span><span class="mh">0x3B</span><span class="p">,</span><span class="mh">0x3D</span><span class="p">,</span><span class="mh">0x43</span><span class="p">,</span><span class="mh">0x47</span><span class="p">,</span><span class="mh">0x49</span><span class="p">,</span><span class="mh">0x4F</span><span class="p">,</span><span class="mh">0x53</span><span class="p">,</span><span class="mh">0x59</span><span class="p">,</span><span class="mh">0x61</span><span class="p">,</span><span class="mh">0x65</span><span class="p">,</span><span class="mh">0x67</span><span class="p">,</span><span class="mh">0x6B</span><span class="p">,</span><span class="mh">0x6D</span><span class="p">,</span><span class="mh">0x71</span><span class="p">,</span><span class="mh">0x7F</span><span class="p">,</span><span class="mh">0x83</span><span class="p">,</span><span class="mh">0x89</span><span class="p">,</span><span class="mh">0x8B</span><span class="p">,</span><span class="mh">0x95</span><span class="p">,</span><span class="mh">0x97</span><span class="p">,</span><span class="mh">0x9D</span><span class="p">,</span><span class="mh">0x0A3</span><span class="p">,</span><span class="mh">0xA7</span><span class="p">,</span><span class="mh">0xAD</span><span class="p">,</span><span class="mh">0xB3</span><span class="p">,</span><span class="mh">0xB5</span><span class="p">,</span><span class="mh">0xbf</span><span class="p">,</span><span class="mh">0xc1</span><span class="p">,</span><span class="mh">0xc5</span><span class="p">,</span><span class="mh">0xc7</span><span class="p">,</span><span class="mh">0xd3</span><span class="p">,</span><span class="mh">0xdf</span><span class="p">,</span><span class="mh">0xe3</span><span class="p">,</span><span class="mh">0xe5</span><span class="p">,</span><span class="mh">0xe9</span><span class="p">,</span><span class="mh">0xef</span><span class="p">,</span><span class="mh">0xf1</span><span class="p">,</span><span class="mh">0xfb</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>So for this encryption function we have the output which is <code class="language-plaintext highlighter-rouge">IQHR}nxio_vtvk_aapbijsr_vnxwbbmm{</code> and the key
This is a kind of a rotation encryption function so I assumed that I will got the right flag if just passed the output as input again and so on to get the write flag
Also I rewrited it in python so as we can decrypt our string
I made this script</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="rouge-code"><pre><span class="n">key</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x03</span><span class="p">,</span><span class="mh">0x05</span><span class="p">,</span><span class="mh">0x07</span><span class="p">,</span><span class="mh">0x0b</span><span class="p">,</span><span class="mh">0x0d</span><span class="p">,</span><span class="mh">0x11</span><span class="p">,</span><span class="mh">0x13</span><span class="p">,</span><span class="mh">0x17</span><span class="p">,</span><span class="mh">0x1D</span><span class="p">,</span><span class="mh">0x1F</span><span class="p">,</span><span class="mh">0x25</span><span class="p">,</span><span class="mh">0x29</span><span class="p">,</span><span class="mh">0x2B</span><span class="p">,</span><span class="mh">0x2F</span><span class="p">,</span><span class="mh">0x35</span><span class="p">,</span><span class="mh">0x3B</span><span class="p">,</span><span class="mh">0x3D</span><span class="p">,</span><span class="mh">0x43</span><span class="p">,</span><span class="mh">0x47</span><span class="p">,</span><span class="mh">0x49</span><span class="p">,</span><span class="mh">0x4F</span><span class="p">,</span><span class="mh">0x53</span><span class="p">,</span><span class="mh">0x59</span><span class="p">,</span><span class="mh">0x61</span><span class="p">,</span><span class="mh">0x65</span><span class="p">,</span><span class="mh">0x67</span><span class="p">,</span><span class="mh">0x6B</span><span class="p">,</span><span class="mh">0x6D</span><span class="p">,</span><span class="mh">0x71</span><span class="p">,</span><span class="mh">0x7F</span><span class="p">,</span><span class="mh">0x83</span><span class="p">,</span><span class="mh">0x89</span><span class="p">,</span><span class="mh">0x8B</span><span class="p">,</span><span class="mh">0x95</span><span class="p">,</span><span class="mh">0x97</span><span class="p">,</span><span class="mh">0x9D</span><span class="p">,</span><span class="mh">0x0A3</span><span class="p">,</span><span class="mh">0xA7</span><span class="p">,</span><span class="mh">0xAD</span><span class="p">,</span><span class="mh">0xB3</span><span class="p">,</span><span class="mh">0xB5</span><span class="p">,</span><span class="mh">0xbf</span><span class="p">,</span><span class="mh">0xc1</span><span class="p">,</span><span class="mh">0xc5</span><span class="p">,</span><span class="mh">0xc7</span><span class="p">,</span><span class="mh">0xd3</span><span class="p">,</span><span class="mh">0xdf</span><span class="p">,</span><span class="mh">0xe3</span><span class="p">,</span><span class="mh">0xe5</span><span class="p">,</span><span class="mh">0xe9</span><span class="p">,</span><span class="mh">0xef</span><span class="p">,</span><span class="mh">0xf1</span><span class="p">,</span><span class="mh">0xfb</span><span class="p">]</span>
<span class="n">def</span> <span class="n">enc</span><span class="p">(</span><span class="n">inp</span><span class="p">)</span><span class="o">:</span>
    <span class="n">inp</span> <span class="o">=</span> <span class="n">list</span><span class="p">(</span><span class="n">inp</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">inp</span><span class="p">))</span><span class="o">:</span>
        <span class="n">current_char</span> <span class="o">=</span> <span class="n">ord</span><span class="p">(</span><span class="n">inp</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">v17</span> <span class="o">=</span> <span class="n">ord</span><span class="p">(</span><span class="n">inp</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="n">key</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">current_char</span> <span class="o">&gt;</span> <span class="mi">96</span> <span class="n">and</span> <span class="n">current_char</span> <span class="o">&lt;=</span> <span class="mi">122</span><span class="o">:</span>
            <span class="n">v6</span> <span class="o">=</span> <span class="mi">122</span>
        <span class="k">else</span><span class="o">:</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">&gt;</span> <span class="mi">96</span> <span class="n">and</span> <span class="n">current_char</span> <span class="o">&lt;=</span> <span class="mi">122</span> <span class="n">or</span> <span class="n">current_char</span> <span class="o">&gt;</span> <span class="mi">64</span> <span class="n">and</span> <span class="n">current_char</span> <span class="o">&lt;=</span> <span class="mi">90</span><span class="p">)</span> <span class="n">and</span> <span class="n">not</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">&gt;</span> <span class="mi">96</span> <span class="n">and</span> <span class="n">current_char</span> <span class="o">&lt;=</span> <span class="mi">122</span><span class="p">)</span><span class="o">:</span>
                <span class="n">v6</span> <span class="o">=</span> <span class="mi">90</span>
            <span class="k">else</span><span class="o">:</span>
                <span class="n">v6</span> <span class="o">=</span> <span class="n">current_char</span>
        <span class="k">while</span> <span class="n">v17</span> <span class="o">&gt;</span> <span class="n">v6</span><span class="o">:</span> <span class="n">v17</span> <span class="o">-=</span> <span class="mi">26</span>
        <span class="k">if</span> <span class="n">current_char</span> <span class="o">==</span> <span class="mi">123</span><span class="o">:</span>
            <span class="n">v12</span> <span class="o">=</span> <span class="mi">125</span>
        <span class="k">else</span><span class="o">:</span>
            <span class="k">if</span> <span class="n">current_char</span> <span class="o">==</span> <span class="mi">125</span><span class="o">:</span>
                <span class="n">v12</span> <span class="o">=</span> <span class="mi">123</span>
            <span class="k">else</span><span class="o">:</span>
                <span class="k">if</span> <span class="n">current_char</span> <span class="o">&gt;</span> <span class="mi">96</span> <span class="n">and</span> <span class="n">current_char</span> <span class="o">&lt;=</span> <span class="mi">122</span> <span class="n">or</span> <span class="n">current_char</span> <span class="o">&gt;</span> <span class="mi">64</span> <span class="n">and</span> <span class="n">current_char</span> <span class="o">&lt;=</span> <span class="mi">90</span><span class="o">:</span>
                    <span class="n">v12</span> <span class="o">=</span> <span class="n">v17</span>
                <span class="k">else</span><span class="o">:</span>
                    <span class="n">v12</span> <span class="o">=</span> <span class="n">current_char</span>
        <span class="n">inp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">chr</span><span class="p">(</span><span class="n">v12</span><span class="p">)</span>
    <span class="k">return</span> <span class="err">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">inp</span><span class="p">)</span>


<span class="n">flag</span><span class="o">=</span><span class="s">"IQHR}nxio_vtvk_aapbijsr_vnxwbbmm{"</span>
<span class="k">while</span> <span class="n">True</span><span class="o">:</span>
    <span class="k">if</span> <span class="s">"FLAG"</span> <span class="n">in</span> <span class="n">flag</span><span class="o">:</span>
        <span class="n">print</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
        <span class="k">break</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="n">enc</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>` Flag is Captured `¬†¬ª <code class="language-plaintext highlighter-rouge">{well_keep_training_yourself}</code></p>
:ET