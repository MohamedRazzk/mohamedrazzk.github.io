I"ñ <h2 id="inroduction">Inroduction</h2>

<blockquote>
  <p>InsomniHack Teaser CTF 2018 - Rule86</p>
</blockquote>

<h2 id="description">Description</h2>

<p>Kevin is working on a new synchronous stream cipher, but he has been re-using his key.</p>

<p>In this challenge, you are provided with 4 files:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre>hint.gif.enc          - An encrypted GIF
super_cipher.py.enc   - An encrypted python script
rule86.txt            - A cleartext file 
rule86.txt.enc        - The encrypted version of said file
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="writeup">Writeup</h2>

<p>Step 1
we started by getting the keystream from the <code class="language-plaintext highlighter-rouge">rule86.txt</code> file and its encrypted counterpart</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td> --><td class="rouge-code"><pre><span class="n">p1</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">'rule86.txt'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span>
<span class="n">c1</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">'rule86.txt.enc'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span>

<span class="n">keystream</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">c1</span><span class="p">):</span>
    <span class="n">keystream</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>And then, decrypting the other encrypted files</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td> --><td class="rouge-code"><pre><span class="n">c2</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">'super_cipher.py.enc'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span>
<span class="n">p2</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">keystream</span><span class="p">,</span> <span class="n">c2</span><span class="p">):</span>
    <span class="n">p2</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">bytes</span><span class="p">(</span><span class="n">p2</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Since the <code class="language-plaintext highlighter-rouge">rule86.txt.enc</code> file is smaller then <code class="language-plaintext highlighter-rouge">super_cipher.py.enc</code> and <code class="language-plaintext highlighter-rouge">hint.gif.enc</code> we donâ€™t have enough keystream to decrypt the latters.</p>

<p>Step 2</p>

<p>We noticed that the decrypted script was generating a 32-byte integer with a PRNG from the <code class="language-plaintext highlighter-rouge">key</code> (aka the flag) and using that as keystream.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td> --><td class="rouge-code"><pre><span class="n">RULE</span> <span class="o">=</span> <span class="p">[</span><span class="mi">86</span> <span class="o">&gt;&gt;</span> <span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)]</span>
<span class="n">N_BYTES</span> <span class="o">=</span> <span class="mi">32</span>
<span class="n">N</span> <span class="o">=</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">N_BYTES</span>

<span class="n">def</span> <span class="n">next</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">:</span>
  <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">N</span><span class="o">+</span><span class="mi">1</span> <span class="o">|</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="o">|</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="o">-</span><span class="mi">1</span>
  <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">N</span><span class="p">)</span><span class="o">:</span>
    <span class="n">y</span> <span class="o">|=</span> <span class="n">RULE</span><span class="p">[(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">7</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
  <span class="k">return</span> <span class="n">y</span>

<span class="cp"># Bootstrap the PNRG
</span><span class="n">keystream</span> <span class="o">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">key</span><span class="p">.</span><span class="n">encode</span><span class="p">(),</span><span class="err">'</span><span class="n">little</span><span class="err">'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">N</span><span class="c1">//2):</span>
  <span class="n">keystream</span> <span class="o">=</span> <span class="n">next</span><span class="p">(</span><span class="n">keystream</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>The simple way to solve this and decrypt the gif and the script was to retrive the starting 32-byte integer from the known keystream and then using the PRNG function to reproduce the keystream by generating all the integer we wanted.</p>

<p><img src="/assets/img/sample/gif.png" alt="upload-image" /></p>

<p>So Iâ€™ve made a recreate script part of the gif following this pattern.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td> --><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
</span>
<span class="n">l1</span><span class="o">=</span><span class="p">[</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x2b</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x55</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x80</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\xaa</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\xd5</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\xff</span><span class="s">'</span><span class="p">]</span>
<span class="n">l2</span><span class="o">=</span><span class="p">[</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x33</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x66</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x99</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\xcc</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\xff</span><span class="s">'</span><span class="p">]</span>

<span class="n">header</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x47\x49\x46\x38\x39\x61\x67\x02\xE6\x00\xF7\x00\x00</span><span class="s">'</span>

<span class="n">ary</span> <span class="o">=</span> <span class="sa">b</span><span class="s">''</span> <span class="o">+</span> <span class="n">header</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">l2</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">l1</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">l2</span><span class="p">:</span>
            <span class="n">ary</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="n">k</span>

<span class="n">gne</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">'hint_full.gif'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span>
<span class="n">gne</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">ary</span><span class="p">)</span>
<span class="n">gne</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

<span class="c1"># l1 l2 l1 l1 l2 l1 l1 l2 l1 l1 l2 l1 l1 l2 l1 l1 l2 l1
# 00 00 00 00 00 33 00 00 66 00 00 99 00 00 CC 00 00 FF
# 00 2B 00 00 2B 33 00 2B 66 00 2B 99 00 2B CC 00 2B FF
# 00 55 00 00 55 33 00 55 66 00 55 99 00 55 CC 00 55 FF
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>All went smooth and without problem so I kept thinking it was the good approach, beside that the gif was corrupted, but the keystream was right and we decrypted all the script</p>

<p><img src="/assets/img/sample/hint.gif" alt="upload-image" /></p>

<p>Script for recovering the super_cipher.py file</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td> --><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
</span>
<span class="n">p1</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">'rule86.txt'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span>
<span class="n">c1</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">'rule86.txt.enc'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span>
<span class="n">c2</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">'super_cipher.py.enc'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span>
<span class="n">c3</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">'hint.gif.enc'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span>

<span class="c1"># get the first part of the keystream
</span><span class="n">keystream</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">c1</span><span class="p">):</span>
  <span class="n">keystream</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">)</span>

<span class="c1"># decrypt the gif file
</span><span class="n">p3</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">keystream</span><span class="p">,</span> <span class="n">c3</span><span class="p">):</span>
  <span class="n">p3</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">)</span>
    
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">'hint2.gif'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
  <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nf">bytes</span><span class="p">(</span><span class="n">p3</span><span class="p">))</span>

<span class="c1"># run giffer.py to generate hint_full.gif
</span>
<span class="c1"># get another keystream part
</span><span class="n">keystream</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">gif</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">'hint_full.gif'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span>
<span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">c3</span><span class="p">,</span> <span class="n">gif</span><span class="p">):</span>
  <span class="n">keystream</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">)</span>

<span class="c1"># decrypt the full python script
</span><span class="n">p2</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">keystream</span><span class="p">,</span> <span class="n">c2</span><span class="p">):</span>
  <span class="n">p2</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">bytes</span><span class="p">(</span><span class="n">p2</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
    
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">'super_cipher1.py'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
  <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nf">bytes</span><span class="p">(</span><span class="n">p2</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Step 3
Now we know that the flag is the seed of the PRNG used as encryption keystream.
We only need to reverse it and get the previous number for each step. Easy.</p>

<p>Letâ€™s start from this line.
<code class="language-plaintext highlighter-rouge">x = (x &amp; 1) &lt;&lt; N+1 | x &lt;&lt; 1 | x &gt;&gt; N-1</code></p>

<p><code class="language-plaintext highlighter-rouge">(x &amp; 1)</code> get the lsb from <code class="language-plaintext highlighter-rouge">x</code> (our starting number)
<code class="language-plaintext highlighter-rouge">(x &amp; 1) &lt;&lt; N+1</code> will shift it 257 positions left (N = 256)</p>

<p>if <code class="language-plaintext highlighter-rouge">x</code> lsb is 0, <code class="language-plaintext highlighter-rouge">(x &amp; 1) &lt;&lt; N+1</code> will be <code class="language-plaintext highlighter-rouge">0</code>
if <code class="language-plaintext highlighter-rouge">x</code> lsb is 1. <code class="language-plaintext highlighter-rouge">(x &amp; 1) &lt;&lt; N+1</code> will be <code class="language-plaintext highlighter-rouge">1 &lt;&lt; 257</code></p>

<p><code class="language-plaintext highlighter-rouge">x &lt;&lt; 1</code> shift <code class="language-plaintext highlighter-rouge">x</code> by 1 position to the left</p>

<p><code class="language-plaintext highlighter-rouge">x &gt;&gt; N-1</code> will take the 2 msb, shift them by 255 positions right and OR them as lsb</p>

<p>Turns out this is very easy to reverse and also the output number has its 2 msb equals to its 2 lsb.</p>

<p>The reverse operation is the following: <code class="language-plaintext highlighter-rouge">x = (x &gt;&gt; 1) &amp; ((1 &lt;&lt; N)-1)</code></p>

<p><code class="language-plaintext highlighter-rouge">x &gt;&gt; 1</code> shift <code class="language-plaintext highlighter-rouge">x</code> by 1 position right, eliminating the 2 lsb added above.</p>

<p>The AND operation filters the first operandâ€™s bits where the second operand has bits set to 1. 
<code class="language-plaintext highlighter-rouge">(1 &lt;&lt; N)</code> is <code class="language-plaintext highlighter-rouge">0b1000000</code> with N zeros. Minus one will result in <code class="language-plaintext highlighter-rouge">0b111111</code> with N ones.</p>

<p>We are effectively filtering only the N bits we wanted, eliminating the 2 msb added above.</p>

<p>Then the PRNG takes 3 bits at a time from the right and substitute them by the RULE array.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">N</span><span class="p">)</span><span class="o">:</span>
    <span class="n">y</span> <span class="o">|=</span> <span class="n">RULE</span><span class="p">[(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">7</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>For example if we have <code class="language-plaintext highlighter-rouge">0b1100</code>, the for works like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td> --><td class="rouge-code"><pre><span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">RULE</span><span class="p">[</span><span class="mb">0b100</span><span class="p">]</span> <span class="c1"># 0bXXX100
</span><span class="n">y</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">RULE</span><span class="p">[</span><span class="mb">0b110</span><span class="p">]</span> <span class="c1"># 0bXX110X 
</span><span class="n">y</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">RULE</span><span class="p">[</span><span class="mb">0b11</span><span class="p">]</span>  <span class="c1"># 0bX011XX
</span><span class="n">y</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">RULE</span><span class="p">[</span><span class="mb">0b1</span><span class="p">]</span>   <span class="c1"># 0b001XXX
</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>        <span class="c1"># reverse y 
</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Output y will be <code class="language-plaintext highlighter-rouge">0b1011</code></p>

<p>Reversing this is pretty easy too, just scan y and get the possible preimage values of RULE mapping function that result in either 1 or 0.
If the current y bit is 1, check what value in RULE output 1 and check if that value is consistent with the previous ones (since chosen bits form x are overlapping)</p>

<p>To recovery  the integer keystream</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td> --><td class="rouge-code"><pre><span class="kn">import</span> <span class="n">sys</span>

<span class="n">RULE</span> <span class="o">=</span> <span class="p">[</span><span class="mi">86</span> <span class="o">&gt;&gt;</span> <span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)]</span>
<span class="n">N_BYTES</span> <span class="o">=</span> <span class="mi">32</span>
<span class="n">N</span> <span class="o">=</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">N_BYTES</span>

<span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
  <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">N</span><span class="o">+</span><span class="mi">1</span> <span class="o">|</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="o">|</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="o">-</span><span class="mi">1</span>
  <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
    <span class="n">y</span> <span class="o">|=</span> <span class="n">RULE</span><span class="p">[(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">7</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
  <span class="k">return</span> <span class="n">y</span>

<span class="n">p</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">'rule86.txt'</span><span class="p">,</span><span class="s">'rb'</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">'rule86.txt.enc'</span><span class="p">,</span><span class="s">'rb'</span><span class="p">)</span>

<span class="n">plaintext</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">N_BYTES</span><span class="p">)</span>
<span class="n">ciphertext</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">N_BYTES</span><span class="p">)</span>

<span class="c1"># print the full keystream
</span><span class="k">while</span> <span class="n">plaintext</span><span class="p">:</span>
  <span class="n">x</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">plaintext</span><span class="p">,</span><span class="s">'little'</span><span class="p">)</span> <span class="o">^</span> <span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span><span class="s">'little'</span><span class="p">)</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
  <span class="n">plaintext</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">N_BYTES</span><span class="p">)</span>
  <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">N_BYTES</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>For reverseing the PRNG and get the seed/flag</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
</pre></td> --><td class="rouge-code"><pre><span class="n">RULE</span> <span class="o">=</span> <span class="p">[</span><span class="mi">86</span> <span class="o">&gt;&gt;</span> <span class="n">i</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)]</span>
<span class="n">N_BYTES</span> <span class="o">=</span> <span class="mi">32</span>
<span class="n">N</span> <span class="o">=</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">N_BYTES</span>

<span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">n</span><span class="o">=</span><span class="n">N</span><span class="p">):</span>
  <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">N</span><span class="o">+</span><span class="mi">1</span> <span class="o">|</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="o">|</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="o">-</span><span class="mi">1</span>
  <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
    <span class="n">y</span> <span class="o">|=</span> <span class="n">RULE</span><span class="p">[(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">7</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
  <span class="k">return</span> <span class="n">y</span>


<span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="n">y</span><span class="p">):</span>
  <span class="n">valid</span> <span class="o">=</span> <span class="p">[]</span>                            <span class="c1"># declare a valid array since the preimage of a value according
</span>                                        <span class="c1"># to the rule can be the result of 4 different input
</span>  
  <span class="n">ycell</span> <span class="o">=</span> <span class="n">y</span> <span class="o">&amp;</span> <span class="mb">0b1</span>                       <span class="c1"># get the last bit
</span>  <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">RULE</span><span class="p">)):</span>            <span class="c1"># for every rule 
</span>    <span class="k">if</span> <span class="n">RULE</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">ycell</span><span class="p">:</span>                <span class="c1"># check if the result match our expected value
</span>      <span class="n">valid</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>                   <span class="c1"># add the value as valid
</span>  
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>                 <span class="c1"># for every bit in y (should be 256/258 bit)
</span>    <span class="n">newvalid</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">valid</span><span class="p">:</span>                     <span class="c1"># for every previous valid value
</span>      <span class="n">ycell</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mb">0b1</span>            <span class="c1"># get the y target cell (1 bit)
</span>      <span class="n">xcell</span> <span class="o">=</span> <span class="p">(</span><span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mb">0b011</span>          <span class="c1"># get the x target cell (2 bit out of 3) from the previous valid
</span>      <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">RULE</span><span class="p">)):</span>        
        <span class="k">if</span> <span class="n">RULE</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">ycell</span><span class="p">:</span>
          <span class="nf">if </span><span class="p">(</span><span class="n">j</span> <span class="o">&amp;</span> <span class="mb">0b011</span><span class="p">)</span> <span class="o">==</span> <span class="n">xcell</span><span class="p">:</span>      <span class="c1"># check if the result match our target one
</span>            <span class="n">v</span> <span class="o">|=</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">)</span>               <span class="c1"># "add" our match to the already valid one
</span>            <span class="n">newvalid</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>          <span class="c1"># update the valid list
</span>    <span class="n">valid</span> <span class="o">=</span> <span class="n">newvalid</span>

  <span class="n">x</span> <span class="o">=</span> <span class="bp">None</span>
  <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">valid</span><span class="p">:</span>                       <span class="c1"># for every valid 256 bit value
</span>    <span class="nf">if </span><span class="p">(</span><span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="mi">256</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="n">v</span> <span class="o">&amp;</span> <span class="mb">0b11</span><span class="p">):</span>        <span class="c1"># check if the 2 msb are equals to the 2 lsb
</span>      <span class="n">x</span> <span class="o">=</span> <span class="n">v</span>                             <span class="c1"># we found our previous x 
</span>
  <span class="k">if</span> <span class="n">x</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Error no valid integer!"</span><span class="p">)</span>
    <span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
          
  <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">N</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>           <span class="c1"># fix our x accordingly
</span>  <span class="k">return</span> <span class="n">x</span>


<span class="c1">#values from the keystream
</span><span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">37450399269036614778703305999225837723915454186067915626747458322635448226786</span><span class="p">,</span>
<span class="mi">100622653914913501834016856771730649612864879431221716975620828032766397709367</span><span class="p">,</span>
<span class="mi">30565965598786057661696410930164890805958057693583615925316094177133280560720</span><span class="p">,</span>
<span class="mi">103573567656710023306192266386049368645675636074643938780342918703636500548568</span><span class="p">,</span>
<span class="mi">28509515191943075455625810763252620824333983857860790449437105502768741406797</span><span class="p">,</span>
<span class="mi">87537284303558144156631836069957764733725337398790274426598731583572530580725</span><span class="p">,</span>
<span class="mi">44716782229954850790645591045965014941901610454109696374926338641251779999508</span><span class="p">,</span>
<span class="mi">82447195088123999846117257332504341489187184956851468679950679621555020370358</span><span class="p">,</span>
<span class="mi">66901809945344917781374326984783824023739095925450107364519045210557505092242</span><span class="p">,</span>
<span class="mi">114067135427233025222698564170101622975443616062287263643297019211756836637438</span><span class="p">,</span>
<span class="mi">2884516673931260333907001189797696957250433333677043264446344069828816140802</span><span class="p">,</span>
<span class="mi">5289872070696193140037770894656341630909797897334877860267293814493245082375</span><span class="p">,</span>
<span class="mi">69023781971677661808035522723190242410127104903614192265146189107040377117065</span><span class="p">,</span>
<span class="mi">107613775284599791185420266567845597101440592435618453390961765397563059875550</span><span class="p">,</span>
<span class="mi">16357066489843479901612193664610011889060446509506296924636891723597443981890</span><span class="p">,</span>
<span class="mi">57186523063755103597333412726627151956381596060761612487300750841069890516967</span><span class="p">]</span>


<span class="c1"># try to reverse the keystream
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
  <span class="nf">next</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
  <span class="n">a</span> <span class="o">=</span> <span class="nf">reverse</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

  <span class="k">if</span> <span class="n">a</span> <span class="o">!=</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">'Error in keystream'</span><span class="p">)</span>
    <span class="nf">exit</span><span class="p">()</span>
  <span class="nf">print</span><span class="p">(</span><span class="s">'OK ---'</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
  
<span class="nf">print</span><span class="p">(</span><span class="s">"YOU ROCK! Keystream reversed.</span><span class="se">\n</span><span class="s">Reversing 128 bootstrap rounds..."</span><span class="p">)</span>

<span class="c1"># after this you should go 128 block reverse and get the PRNG seed aka FLAG
</span><span class="n">curr</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">129</span><span class="p">):</span>
  <span class="n">curr</span> <span class="o">=</span> <span class="nf">reverse</span><span class="p">(</span><span class="n">curr</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="s">"128 rounds done.</span><span class="se">\n</span><span class="s">Printing flag...</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">curr</span><span class="p">.</span><span class="nf">to_bytes</span><span class="p">(</span><span class="n">N_BYTES</span><span class="p">,</span><span class="s">'little'</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>` Flag is Captured `Â Â» <code class="language-plaintext highlighter-rouge">INS{Rule86_is_W0lfr4m_Cha0s}</code></p>

:ET